import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:shared_preferences/shared_preferences.dart';
import '../../providers/sign_up_provider.dart';
import '../../providers/user_provider.dart';  // UserProvider import Ï∂îÍ∞Ä
import 'package:ongi_flutter/services/api/user_api.dart';
import '../main/main_tab.dart';
import '../../styles/app_styles.dart';

class SignInPage extends StatefulWidget {
  const SignInPage({super.key});

  @override
  State<SignInPage> createState() => _SignInPageState();
}

class _SignInPageState extends State<SignInPage> {
  final TextEditingController _emailController = TextEditingController();
  final TextEditingController _passwordController = TextEditingController();
  bool _isLoading = false;

  Future<void> _handleSignIn() async {
    final email = _emailController.text.trim();
    final password = _passwordController.text.trim();

    print("üîµ Î°úÍ∑∏Ïù∏ ÏöîÏ≤≠ ÏãúÏûë: email=$email");

    setState(() { _isLoading = true; });

    try {
      final signUpProvider = Provider.of<SignUpProvider>(context, listen: false);
      final userProvider = Provider.of<UserProvider>(context, listen: false);  // UserProvider Ï∂îÍ∞Ä

      // Í∏∞Ï°¥ Îç∞Ïù¥ÌÑ∞ Ï¥àÍ∏∞Ìôî
      await userProvider.reset();  // Í∏∞Ï°¥ ÏÇ¨Ïö©Ïûê Îç∞Ïù¥ÌÑ∞ Ï¥àÍ∏∞Ìôî

      final response = await UserApi.loginUser(email, password);

      print("üü° Î°úÍ∑∏Ïù∏ ÏùëÎãµ: $response");

      setState(() { _isLoading = false; });

      if (response.containsKey("auth_token")) { // ‚úÖ Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ
        // Î°úÍ∑∏Ïù∏ Ï†ïÎ≥¥ Ï†ÄÏû•
        signUpProvider.setAuthToken(response["auth_token"]);
        signUpProvider.setLoggedIn(true);

        SharedPreferences prefs = await SharedPreferences.getInstance();
        if (response.containsKey("user_id")) {
          await prefs.setString("user_id", response["user_id"]);
          print("‚úÖ user_id Ï†ÄÏû• ÏôÑÎ£å: ${response["user_id"]}");
        } else {
          print("‚ùå user_id ÏóÜÏùå");
        }

        // ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Î°úÎìú ÏöîÏ≤≠ (Ï§ëÏöî!)
        print("‚úÖ ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Î°úÎìú ÏöîÏ≤≠");
        await userProvider.loadUserInfo(forceRefresh: true);

        print("‚úÖ Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ, Î©îÏù∏ ÌôîÎ©¥ÏúºÎ°ú Ïù¥Îèô");

        Navigator.pushReplacement(
          context,
          MaterialPageRoute(builder: (context) => MainTabPage()),
        );
      } else { // ‚ùå Î°úÍ∑∏Ïù∏ Ïã§Ìå®
        print("‚ùå Î°úÍ∑∏Ïù∏ Ïã§Ìå®: ${response["error"] ?? "ÏûòÎ™ªÎêú Ïù¥Î©îÏùº ÎòêÎäî ÎπÑÎ∞ÄÎ≤àÌò∏"}");

        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text("‚ùå Î°úÍ∑∏Ïù∏ Ïã§Ìå®: ${response["error"] ?? "ÏûòÎ™ªÎêú Ïù¥Î©îÏùº ÎòêÎäî ÎπÑÎ∞ÄÎ≤àÌò∏ÏûÖÎãàÎã§."}")),
        );
      }
    } catch (e) {
      setState(() { _isLoading = false; }); // ‚úÖ ÏòàÏô∏ Î∞úÏÉù Ïãú Î°úÎî© Ìï¥Ï†ú
      print("‚ùå Î°úÍ∑∏Ïù∏ ÏöîÏ≤≠ Ï§ë ÏòàÏô∏ Î∞úÏÉù: $e");

      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text("‚ùå ÎÑ§Ìä∏ÏõåÌÅ¨ Ïò§Î•ò: Î°úÍ∑∏Ïù∏Ìï† Ïàò ÏóÜÏäµÎãàÎã§.")),
      );
    }
  }


  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: AppColors.primary,
      appBar: AppBar(
        backgroundColor: AppColors.primary,
        leading: IconButton(
          icon: const Icon(Icons.arrow_back, color: Colors.white),
          onPressed: () => Navigator.pop(context),
        ),
        title: const Text("Î°úÍ∑∏Ïù∏", style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold, color: Colors.white)),
        centerTitle: true,
      ),
      body: Padding(
        padding: const EdgeInsets.all(20),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Text("Ïù¥Î©îÏùº", style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold, color: Colors.white)),
            TextField(controller: _emailController, keyboardType: TextInputType.emailAddress, decoration: _inputDecoration()),
            const SizedBox(height: 15),
            const Text("ÎπÑÎ∞ÄÎ≤àÌò∏", style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold, color: Colors.white)),
            TextField(controller: _passwordController, obscureText: true, decoration: _inputDecoration()),
            const SizedBox(height: 30),
            Center(
              child: SizedBox(
                width: 100,
                height: 50,
                child: ElevatedButton(
                  onPressed: _isLoading ? null : _handleSignIn, // ‚úÖ Î°úÍ∑∏Ïù∏ ÏöîÏ≤≠
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.white,
                    shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(30)),
                  ),
                  child: _isLoading
                      ? const CircularProgressIndicator()
                      : const Text("Î°úÍ∑∏Ïù∏", style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold, color: Colors.grey)),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  InputDecoration _inputDecoration() {
    return InputDecoration(
      filled: true,
      fillColor: Colors.white,
      border: OutlineInputBorder(borderRadius: BorderRadius.circular(10), borderSide: BorderSide.none),
    );
  }
}